{"version":3,"file":"placement.min.js","sources":["../src/placement.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\nimport Templates from 'core/templates';\nimport Ajax from 'core/ajax';\nimport AIHelper from 'core_ai/helper';\nimport {getString} from 'core/str';\nimport Notification from 'core/notification';\n/**\n * Module to load and render the tools for the placement.\n *\n * Note that we completely ignore user agreement and privacy policy here\n * for simplicity but it should be a consideration in a real implementation.\n *\n * @module     aiplacement_aipsample/placement\n * @copyright  2024 Laurent David <laurent.david@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\nconst Selectors = {\n    ELEMENTS: {\n        AIRESPONSE_AREA: '.aipsample-placement-ui [data-region=\"response\"]',\n    },\n    ACTIONS: {\n        RUN: '.aipsample-placement-ui [data-action=\"run\"]',\n    }\n};\n\n/**\n * Placement class.\n */\nconst Placement = class {\n    /**\n     * Constructor.\n     * @param {Integer} userId The user ID.\n     * @param {Integer} contextId The context ID.\n     */\n    constructor(userId, contextId) {\n        this.userId = userId;\n        this.contextId = contextId;\n        this.aiResponseArea = document.querySelector(Selectors.ELEMENTS.AIRESPONSE_AREA);\n        this.registerEventListeners();\n    }\n    /**\n     * Register event listeners.\n     */\n    registerEventListeners() {\n        document.querySelectorAll(Selectors.ACTIONS.RUN).forEach(\n            (el) => el.addEventListener('click', async(e) => {\n                const runAction = e.target.closest(Selectors.ACTIONS.RUN);\n                if (runAction) {\n                    e.preventDefault();\n                    this.displayLoading();\n                    // Clear the drawer content to prevent sending some unnecessary content.\n                    this.aiResponseArea.innerHTML = '';\n                    const request = {\n                        methodname: 'aiplacement_aipsample_generate_content',\n                        args: {\n                            userid: this.userId,\n                            contextid: this.contextId,\n                            prompttext: await getString('prompttext', 'aiplacement_aipsample'),\n                        }\n                    };\n                    try {\n                        const responseObj = await Ajax.call([request])[0];\n                        if (responseObj.error) {\n                            this.displayError();\n                            return;\n                        } else {\n                            const generatedContent = AIHelper.replaceLineBreaks(responseObj.generatedcontent);\n                            this.displayResponse(generatedContent);\n                        }\n                    } catch (error) {\n                        window.console.log(error);\n                        this.displayError();\n                    }\n                }\n            }));\n    }\n    /**\n     * Display the loading spinner.\n     */\n    displayLoading() {\n        Templates.render('aiplacement_aipsample/loading', {}).then((html) => {\n            this.aiResponseArea.innerHTML = html;\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Display the response.\n     * @param {String} content The content to display.\n     */\n    displayResponse(content) {\n        Templates.render('aiplacement_aipsample/response', {content: content}).then((html) => {\n            this.aiResponseArea.innerHTML = html;\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Display the error.\n     */\n    displayError() {\n        Templates.render('aiplacement_aipsample/error', {}).then((html) => {\n            this.aiResponseArea.innerHTML = html;\n            return;\n        }).catch(Notification.exception);\n    }\n\n};\nexport default Placement;"],"names":["Selectors","AIRESPONSE_AREA","RUN","constructor","userId","contextId","aiResponseArea","document","querySelector","registerEventListeners","querySelectorAll","forEach","el","addEventListener","async","e","target","closest","preventDefault","displayLoading","innerHTML","request","methodname","args","userid","this","contextid","prompttext","responseObj","Ajax","call","error","displayError","generatedContent","AIHelper","replaceLineBreaks","generatedcontent","displayResponse","window","console","log","render","then","html","catch","Notification","exception","content"],"mappings":";;;;;;;;;;yQA+BMA,mBACQ,CACNC,gBAAiB,oDAFnBD,kBAIO,CACLE,IAAK,4DAOK,MAMdC,YAAYC,OAAQC,gBACXD,OAASA,YACTC,UAAYA,eACZC,eAAiBC,SAASC,cAAcR,mBAAmBC,sBAC3DQ,yBAKTA,yBACIF,SAASG,iBAAiBV,kBAAkBE,KAAKS,SAC5CC,IAAOA,GAAGC,iBAAiB,SAASC,MAAAA,OACfC,EAAEC,OAAOC,QAAQjB,kBAAkBE,KACtC,CACXa,EAAEG,sBACGC,sBAEAb,eAAec,UAAY,SAC1BC,QAAU,CACZC,WAAY,yCACZC,KAAM,CACFC,OAAQC,KAAKrB,OACbsB,UAAWD,KAAKpB,UAChBsB,iBAAkB,kBAAU,aAAc,qCAIxCC,kBAAoBC,cAAKC,KAAK,CAACT,UAAU,MAC3CO,YAAYG,uBACPC,eAEF,OACGC,iBAAmBC,gBAASC,kBAAkBP,YAAYQ,uBAC3DC,gBAAgBJ,mBAE3B,MAAOF,OACLO,OAAOC,QAAQC,IAAIT,YACdC,sBAQzBb,oCACcsB,OAAO,gCAAiC,IAAIC,MAAMC,YACnDrC,eAAec,UAAYuB,QAEjCC,MAAMC,sBAAaC,WAO1BT,gBAAgBU,4BACFN,OAAO,iCAAkC,CAACM,QAASA,UAAUL,MAAMC,YACpErC,eAAec,UAAYuB,QAEjCC,MAAMC,sBAAaC,WAM1Bd,kCACcS,OAAO,8BAA+B,IAAIC,MAAMC,YACjDrC,eAAec,UAAYuB,QAEjCC,MAAMC,sBAAaC"}